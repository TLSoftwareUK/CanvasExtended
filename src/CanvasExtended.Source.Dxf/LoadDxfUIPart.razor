@using TLS.CanvasExtended.Backend
@using TLS.CanvasExtended.Part
@using System.Net;
@using System.Numerics;
@using netDxf
@using netDxf.Entities
@using netDxf.Objects
@inherits BasePart
@inject NavigationManager NavigationManager
@using Vector2 = System.Numerics.Vector2;

@code {

    [Parameter] public string Url { get; set; }

    private string loadedUrl;
    private Stream _dxf;

    //TODO: Move to static cache as this calsss gets destroyed
    private DxfDocument _loadedDoc;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Url != loadedUrl)
            await LoadDxf();

        PartManager.Redraw();
    }

    private async Task LoadDxf()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);
        _dxf = await client.GetStreamAsync(Url);

        Console.WriteLine("Loading dxf");
        _loadedDoc = DxfDocument.Load(_dxf);
        Console.WriteLine("Loaded");
        _loadedDoc.ActiveLayout = Layout.ModelSpaceName;

        loadedUrl = Url;
    }

    public async override Task Render(IPrimitiveDrawer backend)
    {        
        if (_dxf != null)
        {
            await backend.RenderDxf(_loadedDoc, CanvasX, CanvasY, CanvasWidth, CanvasHeight);
        }
    }

    public override (Vector2, Vector2) GetBounds()
    {
        //_loadedDoc.Lines
        return (Vector2.Zero, Vector2.Zero);
    }

    public (Vector2, Vector2) GetLineBounds(IEnumerable<Line> lines)
    {
        Vector2? start = null;
        Vector2? end = null; 

        //TODO: Check start/end right way around

        foreach(Line l in lines)
        {
            if(start == null)
            {
                start = new Vector2((float)l.StartPoint.X, (float)l.StartPoint.Y);
            }
            if(end == null)
            {
                start = new Vector2((float)l.EndPoint.X, (float)l.EndPoint.Y);
            }


        }
    }          

}
