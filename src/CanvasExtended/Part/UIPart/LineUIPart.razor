@inherits BasePart
@using TLS.CanvasExtended.Backend
@using System.Numerics;

<div style="position: absolute; left: @(StartX)px; top: @(InvertY(StartY))px">
    <div style="position: relative;top: -50%;left: -50%; transform: scale(0.25);">
        @Start
    </div>
</div>

<div style="position: absolute; left: @(MidX)px; top: @(InvertY(MidY))px">
    <div style="position: relative;top: -50%;left: -50%; transform: scale(0.25);">
        @Center
    </div>
</div>

<div style="position: absolute; left: @(EndX)px; top: @(InvertY(EndY))px">
    <div style="position: relative;top: -50%;left: -50%; transform: scale(0.25);">
        @End
    </div>
</div>


@code {
    private LinePart _line;

    [Parameter] public float StartX { get; set; }
    [Parameter] public float StartY { get; set; }
    [Parameter] public float EndX { get; set; }
    [Parameter] public float EndY { get; set; }

    public float MidX  { get{ return (EndX - StartX) / 2; }}
    public float MidY  { get{ return (EndY - StartY) / 2; }}

    [Parameter] public RenderFragment Start { get; set; }
    [Parameter] public RenderFragment Center { get; set; }
    [Parameter] public RenderFragment End { get; set; }

    [Parameter] public PenSettings PenSettings { get; set; } = new PenSettings();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _line = new LinePart();
        _line.Start = new System.Numerics.Vector2(StartX, StartY);
        _line.End = new System.Numerics.Vector2(EndX, EndY);
        _line.PenSettings = PenSettings;
    }

    public async override Task Render(IPrimitiveDrawer backend)
    {
        await _line.Render(backend);        
    }

    public override (Vector2, Vector2) GetBounds()
    {
        return _line.GetBounds();
    }
}

