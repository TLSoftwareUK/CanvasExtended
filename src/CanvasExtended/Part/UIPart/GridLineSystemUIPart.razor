@inherits BasePart
@using TLS.CanvasExtended.Backend
@using System.Numerics

@{
    int xname = 0;
    foreach (float x in XGrids)
    {
        <GridLineUIPart StartX="@x" StartY="@MinimumY" EndX="@x" EndY="@MaximumY" GridName="@xname.ToString()"/>
        xname++;
    }
}

@{
    char yname = 'A';
    foreach (float y in YGrids)
    {
        <GridLineUIPart StartX="@MinimumX" StartY="@y" EndX="@MaximumX" EndY="@y" GridName="@yname.ToString()" @ref="Ref"/>
        yname++;
    }
}

@code {
    [Parameter] public IEnumerable<Vector2> NodeCoordinates { get; set; }
    [Parameter] public float Extension { get; set; } = 50;

    protected List<float> XGrids;
    protected List<float> YGrids;

    protected float MinimumX { get; set; } = 50;
    protected float MaximumX { get; set; } = 250;
    protected float MinimumY { get; set; } = 50;
    protected float MaximumY { get; set; } = 250;

    private List<GridLineUIPart> _refs  = new();
    public GridLineUIPart Ref {set => _refs.Add(value); }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        XGrids = new List<float>();
        YGrids = new List<float>();

        if (NodeCoordinates.Any())
        {
            foreach (Vector2 node in NodeCoordinates)
            {
                if (!XGrids.Any(x => x == node.X))
                {
                    XGrids.Add(node.X);
                }
                if (!YGrids.Any(y => y == node.Y))
                {
                    YGrids.Add(node.Y);
                }
            }

            XGrids = XGrids.OrderBy(x => x).ToList();
            YGrids = YGrids.OrderBy(x => x).ToList();

            MinimumX = XGrids.First() - Extension;
            MaximumX = XGrids.Last() + Extension;

            MinimumY = YGrids.First() - Extension;
            MaximumY = YGrids.Last() + Extension;
        }
    }

    public override (Vector2, Vector2) GetBounds()
    {
        Vector2 start = Vector2.Zero;
        Vector2 end = Vector2.Zero;

        foreach (GridLineUIPart part in _refs)
        {
            Vector2 newStart, newEnd;
            (newStart, newEnd) = part.GetBounds();
            (start, end) = ExtensionHelpers.CombineBounds(start, end, newStart, newEnd);
        }

        return (start, end);
    }
}


